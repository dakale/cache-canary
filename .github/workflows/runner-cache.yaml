name: runner-cache

on: push

jobs:
  upload:
    runs-on: ubuntu-latest
    name: runner-cache upload
    services:
      squid:
        image: dakale/squid
        ports: ['3128:3128']
        options: '--health-cmd "exit 0" --health-interval 5'
    env:
      http_proxy: http://localhost:3128
      https_proxy: http://localhost:3128
    steps:
    - name: Create file to cache
      run: |
        mkdir test-cache
        echo "foo" > test-cache/test.txt
    - uses: actions/cache@v1
      with:
        path: test-cache
        key: ${{ runner.os }}-runner-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-runner-
    - run: |
        docker cp ${{ job.services.squid.id }}:/var/log/squid/access.log access.log
        cat access.log
        # Ensure previous connections went through proxy
        grep "CONNECT artifactcache.actions.githubusercontent.com:443" access.log
        grep "CONNECT .*.blob.core.windows.net:443" access.log
  restore:
    needs: upload
    runs-on: ubuntu-latest
    name: runner-cache restore
    services:
      squid:
        image: dakale/squid
        ports: ['3128:3128']
        options: '--health-cmd "exit 0" --health-interval 5'
    env:
      http_proxy: http://localhost:3128
      https_proxy: http://localhost:3128
    steps:
    - uses: actions/cache@v1
      id: cache
      with:
        path: test-cache
        key: ${{ runner.os }}-runner-${{ github.sha }}

    - name: Fail if cache not found
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        echo "Cache not found, upload failed"
        exit 1
    - name: Check cache contents
      shell: bash
      run: if [ $(cat test-cache/test.txt) == "foo" ]; then echo "Cache contents verified."; exit 0; else echo "Cache invalid"; exit 1; fi
    - run: |
        docker cp ${{ job.services.squid.id }}:/var/log/squid/access.log access.log
        cat access.log
        # Ensure previous connections went through proxy
        grep "CONNECT artifactcache.actions.githubusercontent.com:443" access.log
        grep "CONNECT .*.blob.core.windows.net:443" access.log
